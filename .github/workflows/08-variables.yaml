name: 08 - Using Variables

on:
  workflow_dispatch:

env:
  WORKFLOW_VAR: 'I am a workflow env var'
  OVERWRITTEN: 'I will be overwritten'
  UNDEFINED_DEFAULT: "default value"

jobs:
  echo:
    runs-on: ubuntu-latest
    env:
      JOB_VAR: 'I am a job env var'
      OVERWRITTEN: 'I have been overwritten at the job level'
    steps:
      - name: Print Env Variables
        #when using $ instead of ${{ env. }}, gets resolved after run
        env:
          STEP_VAR: "I am a step env var"
          step_var2: "I am another step var"
        run: |
          echo "Step env var: $STEP_VAR"
          echo "Step env var 2: ${{ env.step_var2 }}"
          echo "Job env var: ${{ env.JOB_VAR }}"
          echo "Workflow env var: $WORKFLOW_VAR"
          echo "Overwritten: $OVERWRITTEN"
      - name: Overwrite Job Variable
        env:
          OVERWRITTEN: 'I have been overwritten at the step level'
        run: |
          echo "Overwritten: $OVERWRITTEN"
  echo2:
    runs-on: ubuntu-latest
    steps:
      - name: Print Variables
        run: |
          echo "Org var: ${{ vars.ORG_VAR || 'default value' }}"
          echo "Org ovverwritten var: ${{ vars.ORG_OVERWRITTEN_VAR || 'Undefined, default'  }}"
          echo "Repo var: ${{ vars.REPOSITORY_VAR || 'default value if undefined' }}"
  echo-prod:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Print Prod Variables
        run: |
          echo "Org var: ${{ vars.ORG_VAR || env.UNDEFINED_DEFAULT }}"
          echo "Org ovverwritten var: ${{ vars.ORG_OVERWRITTEN_VAR || env.UNDEFINED_DEFAULT }}"
          echo "Repo var: ${{ vars.REPOSITORY_VAR || env.UNDEFINED_DEFAULT }}"
          echo "Environmement var: ${{ vars.TARGET_VAR }}"
  
    
